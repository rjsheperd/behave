
interface DoublePtr {};

enum AreaUnits_AreaUnitsEnum {
  "AreaUnits::SquareFeet",
  "AreaUnits::Acres",
  "AreaUnits::Hectares",
  "AreaUnits::SquareMeters",
  "AreaUnits::SquareMiles",
  "AreaUnits::SquareKilometers"
};

enum LengthUnits_LengthUnitsEnum {
  "LengthUnits::Feet",
  "LengthUnits::Inches",
  "LengthUnits::Centimeters",
  "LengthUnits::Meters",
  "LengthUnits::Chains",
  "LengthUnits::Miles",
  "LengthUnits::Kilometers"
};

enum LoadingUnits_LoadingUnitsEnum {
  "LoadingUnits::PoundsPerSquareFoot",
  "LoadingUnits::TonsPerAcre",
  "LoadingUnits::TonnesPerHectare",
  "LoadingUnits::KilogramsPerSquareMeter"
};

enum SurfaceAreaToVolumeUnits_SurfaceAreaToVolumeUnitsEnum {
  "SurfaceAreaToVolumeUnits::SquareFeetOverCubicFeet",
  "SurfaceAreaToVolumeUnits::SquareMetersOverCubicMeters",
  "SurfaceAreaToVolumeUnits::SquareInchesOverCubicInches",
  "SurfaceAreaToVolumeUnits::SquareCentimetersOverCubicCentimers"
};

enum CoverUnits_CoverUnitsEnum {
  "CoverUnits::Fraction",
  "CoverUnits::Percent"
};

enum SpeedUnits_SpeedUnitsEnum {
  "SpeedUnits::FeetPerMinute",
  "SpeedUnits::ChainsPerHour",
  "SpeedUnits::MetersPerSecond",
  "SpeedUnits::MetersPerMinute",
  "SpeedUnits::MilesPerHour",
  "SpeedUnits::KilometersPerHour"
};

enum ProbabilityUnits_ProbabilityUnitsEnum {
  "ProbabilityUnits::Fraction",
  "ProbabilityUnits::Percent"
};

enum MoistureUnits_MoistureUnitsEnum {
  "MoistureUnits::Fraction",
  "MoistureUnits::Percent"
};

enum SlopeUnits_SlopeUnitsEnum {
  "SlopeUnits::Degrees",
  "SlopeUnits::Percent"
};

enum DensityUnits_DensityUnitsEnum {
  "DensityUnits::PoundsPerCubicFoot",
  "DensityUnits::KilogramsPerCubicMeter"
};

enum HeatOfCombustionUnits_HeatOfCombustionUnitsEnum {
  "HeatOfCombustionUnits::BtusPerPound",
  "HeatOfCombustionUnits::KilojoulesPerKilogram"
};

enum HeatSinkUnits_HeatSinkUnitsEnum {
  "HeatSinkUnits::BtusPerCubicFoot",
  "HeatSinkUnits::KilojoulesPerCubicMeter"
};

enum HeatPerUnitAreaUnits_HeatPerUnitAreaUnitsEnum {
  "HeatPerUnitAreaUnits::BtusPerSquareFoot",
  "HeatPerUnitAreaUnits::KilojoulesPerSquareMeterPerSecond",
  "HeatPerUnitAreaUnits::KilowattsPerSquareMeter"
};

enum HeatSourceAndReactionIntensityUnits_HeatSourceAndReactionIntensityUnitsEnum {
  "HeatSourceAndReactionIntensityUnits::BtusPerSquareFootPerMinute",
  "HeatSourceAndReactionIntensityUnits::BtusPerSquareFootPerSecond",
  "HeatSourceAndReactionIntensityUnits::KilojoulesPerSquareMeterPerSecond",
  "HeatSourceAndReactionIntensityUnits::KilojoulesPerSquareMeterPerMinute",
  "HeatSourceAndReactionIntensityUnits::KilowattsPerSquareMeter"
};

enum FirelineIntensityUnits_FirelineIntensityUnitsEnum {
  "FirelineIntensityUnits::BtusPerFootPerSecond",
  "FirelineIntensityUnits::BtusPerFootPerMinute",
  "FirelineIntensityUnits::KilojoulesPerMeterPerSecond",
  "FirelineIntensityUnits::KilojoulesPerMeterPerMinute",
  "FirelineIntensityUnits::KilowattsPerMeter"
};

enum TemperatureUnits_TemperatureUnitsEnum {
  "TemperatureUnits::Fahrenheit",
  "TemperatureUnits::Celsius",
  "TemperatureUnits::Kelvin"
};

enum TimeUnits_TimeUnitsEnum {
  "TimeUnits::Minutes",
  "TimeUnits::Seconds",
  "TimeUnits::Hours"
};

interface FireSize {
  void FireSize();
  void calculateFireBasicDimensions(double effectiveWindSpeed, SpeedUnits_SpeedUnitsEnum windSpeedRateUnits, double forwardSpreadRate, SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  double getFireLengthToWidthRatio();
  double getEccentricity();
  double getBackingSpreadRate(SpeedUnits_SpeedUnitsEnum spreadRateUnits);
  double getEllipticalA(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  double getEllipticalB(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  double getEllipticalC(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  double getFireLength(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  double getMaxFireWidth(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);

  double getFirePerimeter(LengthUnits_LengthUnitsEnum lengthUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
  double getFireArea(AreaUnits_AreaUnitsEnum areaUnits, double elapsedTime, TimeUnits_TimeUnitsEnum timeUnits);
};

enum ContainTactic {
  "HeadAttack", "RearAttack"
};

enum ContainStatus {
  "Unreported",
  "Reported",
  "Attacked",
  "Contained",
  "Overrun",
  "Exhausted",
  "Overflow",
  "SizeLimitExceeded",
  "TimeLimitExceeded"
};

enum ContainFlank {
  "LeftFlank", "RightFlank", "BothFlanks", "NeitherFlank"
};

interface SIGContainResource {
  void SIGContainResource();
  void SIGContainResource(double arrival, double production, double duration, ContainFlank flank, [Const] DOMString desc, double baseCost, double hourCost);
  [Const] DOMString description();
  void print(DOMString buf, long buflen);
  double arrival();
  double hourCost();
  double duration();
  double production();
  double baseCost();
  ContainFlank flank();
};

interface SIGContainForce {
  void SIGContainForce(long maxResources);
  SIGContainResource addResource( SIGContainResource resource ) ;
  SIGContainResource addResource(double arrival, double production, double duration, ContainFlank flank, [Const] DOMString desc, double baseCost, double hourCost);

  double exhausted(ContainFlank flank);
  double firstArrival(ContainFlank flank);
  double nextArrival(double after, double until, ContainFlank flank);
  double productionRate(double minutesSinceReport, ContainFlank flank);

  long resources();
  double resourceArrival(long index);
  double resourceBaseCost(long index);
  double resourceCost(long index, double finalTime);
  [Const] DOMString resourceDescription(long index);
  double resourceDuration(long index);
  ContainFlank resourceFlank(long index);
  double resourceHourCost(long index);
  double resourceProduction(long index);
};

interface SIGContainForceAdapter {
  void SIGContainForceAdapter();
  void addResource(double arrival, double production, double duration, ContainFlank flank, [Const] DOMString desc, double baseCost, double hourCost);
  double firstArrival(ContainFlank flank);
  long removeResourceAt(long index);
  long removeResourceWithThisDesc([Const] DOMString desc);
  long removeAllResourcesWithThisDesc([Const] DOMString desc);
};

interface SIGContainSim {
  void SIGContainSim(double reportSize, double reportRate, SIGDiurnalROS diurnalROS, long fireStartMinutesStartTime, double lwRatio, SIGContainForce force, ContainTactic tactic, double attackDist, boolean retry, long minSteps, long maxSteps, long maxFireSize, long maxFireTime);

  // Input accessors
  double attackDistance();
  double attackPointX();
  double attackPointY();
  double attackTime();
  double distanceStep();
  double fireBackAtAttack();
  double fireBackAtReport();
  double fireHeadAtAttack();
  double fireHeadAtReport();
  double fireLwRatioAtReport();
  double fireReportTime();
  double fireSizeAtReport();
  double fireSpreadRateAtBack();
  double fireSpreadRateAtReport();
  SIGContainForce force();
  long maximumSimulationSteps();
  long minimumSimulationSteps();
  ContainStatus status();
  ContainTactic tactic();

  // Output accessors
  double finalFireCost();
  double finalFireLine();
  double finalFirePerimeter();
  double finalFireSize();
  double finalFireSweep();
  double finalFireTime();
  long finalResourcesUsed();

  // Coordinate Array
  [Value] DoublePtr fireHeadX();
  [Value] DoublePtr firePerimeterY();
  [Value] DoublePtr firePerimeterX();
  long firePoints();

  void checkmem(DOMString fileName, long lineNumber, any ptr, DOMString type, long size);
  void run();

  // Area of the uncontained portion of the ellipse
  double UncontainedArea(double head, double lwRatio, double x, double y, ContainTactic tactic);
};

interface SIGDiurnalROS {
  void SIGDiurnalROS();
  void push(double v);
  double at(long i);
  long size();
};

interface SIGContain {
  void SIGContain(double reportSize, double reportRate, SIGDiurnalROS diurnalROS, long fireStartMinutesStartTime, double lwRatio, double distStep, ContainFlank flank, SIGContainForce force, double attackTime, ContainTactic tactic, double attackDist);
  double simulationTime();
  double fireSpreadRateAtBack();
  double fireLwRatioAtReport();
  SIGContainForce force();
  double resourceHourCost(long index);
  double attackDistance();
  double attackPointX();
  double fireHeadAtAttack();
  double attackPointY();
  double attackTime();
  double resourceBaseCost(long index);
  double fireSpreadRateAtReport();
  double fireHeadAtReport();
  double fireReportTime();
  double resourceProduction(long index);
  double fireBackAtAttack();
  long simulationStep();
  ContainTactic tactic();
  [Const] DOMString resourceDescription(long index);
  double distanceStep();
  ContainStatus status();
  double resourceArrival(long index);
  double fireSizeAtReport();
  double setFireStartTimeMinutes(long starttime);
  double fireBackAtReport();
  double resourceDuration(long index);
  long resources();
  double exhaustedTime();
};


interface SIGContainAdapter {
  void SIGContainAdapter();
  void setReportSize(double reportSize, AreaUnits_AreaUnitsEnum areaUnits);
  void setLwRatio(double lwRatio);
  void setMaxFireTime(long maxFireTime);
  void doContainRun();
  void setReportRate(double reportRate, SpeedUnits_SpeedUnitsEnum speedUnits);
  double getPerimiterAtInitialAttack(LengthUnits_LengthUnitsEnum lengthUnits);
  void setTactic(ContainTactic tactic);
  void removeAllResources();
  double getFinalFireSize(AreaUnits_AreaUnitsEnum areaUnits);
  double getFireSizeAtInitialAttack(AreaUnits_AreaUnitsEnum areaUnits);
  void setAttackDistance(double attackDistance, LengthUnits_LengthUnitsEnum lengthUnits);
  ContainStatus getContainmentStatus();
  long removeResourceWithThisDesc([Const] DOMString desc);
  double getPerimeterAtContainment(LengthUnits_LengthUnitsEnum lengthUnits);
  double getFinalFireLineLength(LengthUnits_LengthUnitsEnum lengthUnits);
  void setRetry(boolean retry);
  double getFinalContainmentArea(AreaUnits_AreaUnitsEnum areaUnits);
  long removeResourceAt(long index);
  long removeAllResourcesWithThisDesc([Const] DOMString desc);
  double getFinalCost();
  double getFinalTimeSinceReport(TimeUnits_TimeUnitsEnum timeUnits);
  void setFireStartTime(long fireStartTime);
  void setMinSteps(long minSteps);
  void setMaxSteps(long maxSteps);
  void setMaxFireSize(long maxFireSize);
  void addResource(double arrival, double duration, TimeUnits_TimeUnitsEnum timeUnit, double productionRate, SpeedUnits_SpeedUnitsEnum productionRateUnits, DOMString description, double baseCost, double hourCost);
};

enum SpotTreeSpecies {
  "ENGELMANN_SPRUCE", "DOUGLAS_FIR", "SUBALPINE_FIR", "WESTERN_HEMLOCK", "PONDEROSA_PINE", "LODGEPOLE_PINE", "WESTERN_WHITE_PINE", "GRAND_FIR", "BALSAM_FIR", "SLASH_PINE", "LONGLEAF_PINE", "POND_PINE", "SHORTLEAF_PINE", "LOBLOLLY_PINE"
};

enum SpotFireLocation {
  "MIDSLOPE_WINDWARD", "VALLEY_BOTTOM", "MIDSLOPE_LEEWARD", "RIDGE_TOP"
};

enum SpotArrayConstants {
  "NUM_COLS", "NUM_FIREBRAND_ROWS", "NUM_SPECIES",
};

interface SIGSpotInputs {
  void SIGSpotInputs();
  SpotFireLocation getLocation();
  SpotTreeSpecies getTreeSpecies();

  void setBurningPileFlameHeight(double buringPileFlameHeight, LengthUnits_LengthUnitsEnum flameHeightUnits);
  void setDBH(double DBH, LengthUnits_LengthUnitsEnum DBHUnits);
  void setDownwindCoverHeight(double downwindCoverHeight, LengthUnits_LengthUnitsEnum coverHeightUnits);
  void setLocation(SpotFireLocation location);
  void setRidgeToValleyDistance(double ridgeToValleyDistance, LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits);
  void setRidgeToValleyElevation(double ridgeToValleyElevation, LengthUnits_LengthUnitsEnum elevationUnits);
  void setSurfaceFlameLength(double surfaceFlameLength, LengthUnits_LengthUnitsEnum flameLengthUnits);
  void setTorchingTrees(long torchingTrees);
  void setTreeHeight(double treeHeight, LengthUnits_LengthUnitsEnum treeHeightUnits);
  void setTreeSpecies(SpotTreeSpecies treeSpecies);
  void setWindSpeedAtTwentyFeet(double windSpeedAtTwentyFeet, SpeedUnits_SpeedUnitsEnum windSpeedUnits);

  void updateSpotInputsForBurningPile(SpotFireLocation location, double ridgeToValleyDistance, LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits, double ridgeToValleyElevation, LengthUnits_LengthUnitsEnum elevationUnits, double downwindCoverHeight, LengthUnits_LengthUnitsEnum coverHeightUnits, double buringPileFlameHeight, LengthUnits_LengthUnitsEnum flameHeightUnits, double windSpeedAtTwentyFeet, SpeedUnits_SpeedUnitsEnum windSpeedUnits);
  void updateSpotInputsForSurfaceFire(SpotFireLocation location, double ridgeToValleyDistance, LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits, double ridgeToValleyElevation, LengthUnits_LengthUnitsEnum elevationUnits, double downwindCoverHeight, LengthUnits_LengthUnitsEnum coverHeightUnits, double windSpeedAtTwentyFeet, SpeedUnits_SpeedUnitsEnum windSpeedUnits, double surfaceFlameLength, LengthUnits_LengthUnitsEnum flameLengthUnits);
  void updateSpotInputsForTorchingTrees(SpotFireLocation location, double ridgeToValleyDistance, LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits, double ridgeToValleyElevation, LengthUnits_LengthUnitsEnum elevationUnits, double downwindCoverHeight, LengthUnits_LengthUnitsEnum coverHeightUnits, long torchingTrees, double DBH, LengthUnits_LengthUnitsEnum DBHUnits, double treeHeight, LengthUnits_LengthUnitsEnum treeHeightUnits, SpotTreeSpecies treeSpecies, double windSpeedAtTwentyFeet, SpeedUnits_SpeedUnitsEnum windSpeedUnits);

  double getBurningPileFlameHeight(LengthUnits_LengthUnitsEnum flameHeightUnits);
  double getDBH(LengthUnits_LengthUnitsEnum DBHUnits);
  double getDownwindCoverHeight(LengthUnits_LengthUnitsEnum coverHeightUnits);
  double getRidgeToValleyDistance(LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits);
  double getRidgeToValleyElevation(LengthUnits_LengthUnitsEnum elevationUnits);
  double getSurfaceFlameLength(LengthUnits_LengthUnitsEnum flameLengthUnits);
  double getTreeHeight(LengthUnits_LengthUnitsEnum treeHeightUnits);
  double getWindSpeedAtTwentyFeet(SpeedUnits_SpeedUnitsEnum windSpeedUnits);
  long getTorchingTrees();
};


interface SIGSpot {
  void SIGSpot();
  void initializeMembers();

  void calculateSpottingDistanceFromBurningPile();
  void calculateSpottingDistanceFromSurfaceFire();
  void calculateSpottingDistanceFromTorchingTrees();

  void setBurningPileFlameHeight(double buringPileflameHeight, LengthUnits_LengthUnitsEnum flameHeightUnits);
  void setDBH(double DBH, LengthUnits_LengthUnitsEnum DBHUnits);
  void setDownwindCoverHeight(double downwindCoverHeight, LengthUnits_LengthUnitsEnum coverHeightUnits);
  void setFlameLength(double flameLength, LengthUnits_LengthUnitsEnum flameLengthUnits);
  void setLocation(SpotFireLocation location);
  void setRidgeToValleyDistance(double ridgeToValleyDistance, LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits);
  void setRidgeToValleyElevation(double ridgeToValleyElevation, LengthUnits_LengthUnitsEnum elevationUnits);
  void setTorchingTrees(long torchingTrees);
  void setTreeHeight(double treeHeight, LengthUnits_LengthUnitsEnum treeHeightUnits);
  void setTreeSpecies(SpotTreeSpecies treeSpecies);
  void setWindSpeedAtTwentyFeet(double windSpeedAtTwentyFeet, SpeedUnits_SpeedUnitsEnum windSpeedUnits);

  void updateSpotInputsForBurningPile(SpotFireLocation location, double ridgeToValleyDistance, LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits, double ridgeToValleyElevation, LengthUnits_LengthUnitsEnum elevationUnits, double downwindCoverHeight, LengthUnits_LengthUnitsEnum coverHeightUnits, double buringPileFlameHeight, LengthUnits_LengthUnitsEnum flameHeightUnits, double windSpeedAtTwentyFeet, SpeedUnits_SpeedUnitsEnum windSpeedUnits);
  void updateSpotInputsForSurfaceFire(SpotFireLocation location, double ridgeToValleyDistance, LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits, double ridgeToValleyElevation, LengthUnits_LengthUnitsEnum elevationUnits, double downwindCoverHeight, LengthUnits_LengthUnitsEnum coverHeightUnits, double windSpeedAtTwentyFeet, SpeedUnits_SpeedUnitsEnum windSpeedUnits, double flameLength, LengthUnits_LengthUnitsEnum flameLengthUnits);
  void updateSpotInputsForTorchingTrees(SpotFireLocation location, double ridgeToValleyDistance, LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits, double ridgeToValleyElevation, LengthUnits_LengthUnitsEnum elevationUnits, double downwindCoverHeight, LengthUnits_LengthUnitsEnum coverHeightUnits, long torchingTrees, double DBH, LengthUnits_LengthUnitsEnum DBHUnits, double treeHeight, LengthUnits_LengthUnitsEnum treeHeightUnits, SpotTreeSpecies treeSpecies, double windSpeedAtTwentyFeet, SpeedUnits_SpeedUnitsEnum windSpeedUnits);

  long getTorchingTrees();
  SpotFireLocation getLocation();
  SpotTreeSpecies getTreeSpecies();
  double getBurningPileFlameHeight(LengthUnits_LengthUnitsEnum flameHeightUnits);
  double getCoverHeightUsedForBurningPile(LengthUnits_LengthUnitsEnum coverHeightUnits);
  double getCoverHeightUsedForSurfaceFire(LengthUnits_LengthUnitsEnum coverHeightUnits);
  double getCoverHeightUsedForTorchingTrees(LengthUnits_LengthUnitsEnum coverHeightUnits);
  double getDBH(LengthUnits_LengthUnitsEnum DBHUnits);
  double getDownwindCoverHeight(LengthUnits_LengthUnitsEnum coverHeightUnits);
  double getFlameDurationForTorchingTrees(TimeUnits_TimeUnitsEnum durationUnits);
  double getFlameHeightForTorchingTrees(LengthUnits_LengthUnitsEnum flameHeightUnits);
  double getFlameRatioForTorchingTrees();
  double getMaxFirebrandHeightFromBurningPile(LengthUnits_LengthUnitsEnum firebrandHeightUnits);
  double getMaxFirebrandHeightFromSurfaceFire(LengthUnits_LengthUnitsEnum firebrandHeightUnits);
  double getMaxFirebrandHeightFromTorchingTrees(LengthUnits_LengthUnitsEnum firebrandHeightUnits);
  double getMaxFlatTerrainSpottingDistanceFromBurningPile(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getMaxFlatTerrainSpottingDistanceFromSurfaceFire(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getMaxFlatTerrainSpottingDistanceFromTorchingTrees(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getMaxMountainousTerrainSpottingDistanceFromBurningPile(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getMaxMountainousTerrainSpottingDistanceFromSurfaceFire(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getMaxMountainousTerrainSpottingDistanceFromTorchingTrees(LengthUnits_LengthUnitsEnum spottingDistanceUnits);
  double getRidgeToValleyDistance(LengthUnits_LengthUnitsEnum ridgeToValleyDistanceUnits);
  double getRidgeToValleyElevation(LengthUnits_LengthUnitsEnum elevationUnits);
  double getSurfaceFlameLength(LengthUnits_LengthUnitsEnum surfaceFlameLengthUnits);
  double getTreeHeight(LengthUnits_LengthUnitsEnum treeHeightUnits);
  double getWindSpeedAtTwentyFeet(SpeedUnits_SpeedUnitsEnum windSpeedUnits);
};

interface PalmettoGallberry {
  void PalmettoGallberry();
  void initializeMembers();
  double getHeatOfCombustionLive();
  double calculatePalmettoGallberyLitterLoad(double ageOfRough, double overstoryBasalArea);
  double getPalmettoGallberyLiveOneHourLoad();
  double getPalmettoGallberyDeadFoliageLoad();
  double getHeatOfCombustionDead();
  double calculatePalmettoGallberyLiveFoliageLoad(double ageOfRough, double palmettoCoverage, double heightOfUnderstory);
  double calculatePalmettoGallberyLiveTenHourLoad(double ageOfRough, double heightOfUnderstory);
  double getPalmettoGallberyDeadTenHourLoad();
  double getMoistureOfExtinctionDead();
  double getPalmettoGallberyLiveFoliageLoad();
  double getPalmettoGallberyLitterLoad();
  double calculatePalmettoGallberyDeadTenHourLoad(double ageOfRough, double palmettoCoverage);
  double calculatePalmettoGallberyLiveOneHourLoad(double ageOfRough, double heightOfUnderstory);
  double getPalmettoGallberyFuelBedDepth();
  double calculatePalmettoGallberyDeadFoliageLoad(double ageOfRough, double palmettoCoverage);
  double calculatePalmettoGallberyDeadOneHourLoad(double ageOfRough, double heightOfUnderstory);
  double getPalmettoGallberyLiveTenHourLoad();
  double getPalmettoGallberyDeadOneHourLoad();
  double calculatePalmettoGallberyFuelBedDepth(double heightOfUnderstory);
};

interface WesternAspen {
  void WesternAspen();
  void initializeMembers();
  double calculateAspenMortality(long severity, double flameLength, double DBH);
  double getAspenDBH();
  double getAspenFuelBedDepth(long typeIndex);
  double getAspenHeatOfCombustionDead();
  double getAspenHeatOfCombustionLive();
  double getAspenLoadDeadOneHour(long aspenFuelModelNumber, double aspenCuringLevel);
  double getAspenLoadDeadTenHour(long aspenFuelModelNumber);
  double getAspenLoadLiveHerbaceous(long aspenFuelModelNumber, double aspenCuringLevel);
  double getAspenLoadLiveWoody(long aspenFuelModelNumber, double aspenCuringLevel);
  double getAspenMoistureOfExtinctionDead();
  double getAspenMortality();
  double getAspenSavrDeadOneHour(long aspenFuelModelNumber, double aspenCuringLevel);
  double getAspenSavrDeadTenHour();
  double getAspenSavrLiveHerbaceous();
  double getAspenSavrLiveWoody(long aspenFuelModelNumber, double aspenCuringLevel);
};

interface WindSpeedUtility {
  void WindSpeedUtility();
  double windSpeedAtMidflame(double windSpeedAtTwentyFeet, double windAdjustmentFactor);
  double windSpeedAtTwentyFeetFromTenMeter(double windSpeedAtTenMeters);
};
